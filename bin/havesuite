#!/usr/bin/env node --harmony-async-await

'use strict';

process.title = 'havesuite';

const argv = process.argv.slice(2);
const fs = require('fs');
const path = require('path');
const Mocha = require('mocha');
const selenium = require('selenium-standalone');
const glob = require('glob');

const cwd = path.resolve(process.cwd(), argv[0]);
let options = {}; // Populated from havesuite.json

function HAVESUITE_START() {
  // Attempt to parse HAVESUITE.json
  try {
    options = JSON.parse(fs.readFileSync(path.resolve(cwd, './havesuite.json')));
  } catch (error) {
    throw new Error("Failed to parse havesuite.json\nPlease verify file integrity");
  }

  selenium.start({}, function (error, seleniumProcess) {
    if (error) {
      console.log(error);
      console.log("------------------");
      console.log("An error occurred, attempting to install selenium");
      // try installing selenium
      selenium.install({}, (error) => {
        if (error) throw error;
        HAVESUITE_START();
      })
      return;
    }
    // Instantiate a Mocha instance.
    const mocha = new Mocha({
      ui: 'bdd',
      reporter: 'list'
    });

    global.havesuite = { options };

    let globPath = "";
    if (!Array.isArray(options.path)) {
      globPath = path.join(cwd, options.path);
    } else {
      globPath = options.path.map((p) => `${path.join(cwd, p)}`).join('|');
    }

    // Load test files
    glob(globPath, function (error, files) {
      if (error) throw error;
      mocha.addFile(path.resolve(__dirname, './init.js'));
      files.forEach((file) => mocha.addFile(file));
      mocha.addFile(path.resolve(__dirname, './cleanup.js'));
    

      // Run the tests.
      mocha.run(function (failures) {
        seleniumProcess.kill();
        process.exit();
        process.on('exit', function () {
          seleniumProcess.kill();
          process.exit(failures);  // exit with non-zero status if there were failures
        });
      });
    });
  });
}

HAVESUITE_START();